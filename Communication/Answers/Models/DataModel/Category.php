<?php
namespace Wafl\Extensions\Communication\Answers\Models\DataModel;
abstract class Category extends \DblEj\Extension\ExtensionDataModel
{

    /**
     * CategoryId
     *
     * Data Storage (Wafl\Extensions\Storage\MySql\MySql):
     *        Primary Key
     *        Type: DATA_TYPE_INT unsigned
     *        Default: null
     *
     * @var integer
     */
    protected $_categoryId;
    protected static $extension;

    /**
     * Title
     *
     * Data Storage (Wafl\Extensions\Storage\MySql\MySql):
     *        Type: DATA_TYPE_STRING
     *        Default: null
     *
     * @var string
     */
    protected $_title;
    /**
     * Get_FieldDataTypes
     *
     * Get an array of this model's fields and their data types
     *
     */
    public static function GetFieldDataTypes()
    {
        $fieldTypes = array();
                $fieldTypes["CategoryId"] = Field::DATA_TYPE_INT;
        $fieldTypes["Title"] = Field::DATA_TYPE_STRING;
        return $fieldTypes;
    }

    /**
     * Get an instance of this QaCategory, loading from persistant storage when needed.
     * @param string $keyValue The id (the "primary key") of the desired QaCategory
     * @param boolean $loadFromCacheIfAvailable
     * If true, GetInstance will return the cached QaCategory from the last request for this instance, if it exists in memory.
     * @return \Wafl\Extensions\Communication\Answers\Models\FunctionalModel\Category
     */
    public static function GetInstance($keyValue = null, $loadFromCacheIfAvailable = true)
    {
        return parent::GetInstance($keyValue, $loadFromCacheIfAvailable);
    }

    /**
     * Search
     *
     * Search an index for the given criteria and return matching QaCategorys.
     * An "index" in this context refers to an implementor of IIndex and is generated by an IIndexer (such as the Apache Solr Indexer Extension).
     *
     * @param string $searchFieldName The name of the INDEX FIELD (not necessarily the same as the model or table's field) to search on.
     * @param string $searchValue The indexed value to search for.
     * @param \DblEj\Data\IndexSort[] $sorts How to sort the results.
     * @param int $maxResults The maximum number of results to return.
     * @param int $startOffset The start offset of results to return.
     * @param string $resultKeyField The name of the indexes key field which will be used to lookup the ctual data in the data storage.
     * @param \DblEj\Data\IIndex $searchIndex Which index to seach.  If not provided, the default search index will be used.
     * @param mixed $indexArgs Arguments specific to the index provider
     * @return \Wafl\Extensions\Communication\Answers\Models\FunctionalModel\Category[]
     * @throws \Exception
     */
    public static function Search($searchFieldName, $searchValue, $sorts = null, $maxResults = 100, $startOffset = 0, $resultKeyField = null, \DblEj\Data\IIndex $searchIndex = null, $indexArgs = null)
    {
        self::Initialize();
        return self::_search($searchFieldName, $searchValue, $sorts, $resultKeyField, $maxResults, $startOffset, $searchIndex, $indexArgs);
    }

    /**
     * Filter
     *
     * Get the QaCategory's from the Storage Engine that matches the given filter,
     * Optionally sorted, grouped, and/or joined based on passed arguments.
     *
     * @param string $filter optional The filter to filter by.  If no filter is passed in, then all results are returned.
     * @param string $orderByFieldName optional The name of the field to order the QaCategory's by
     * @param int $maxRecordCount optional The maximum number of QaCategory's to return
     * @param string $groupingField optional The name of the field to group on.
     * @param array $joinObjects optional The tables and fields to join as part of the search criteria (note: joined columns are not returned as properties of the data model).
     * @param int $startOffset optional
     * @param string $arrayKeyField optional
     * @param boolean $useCachedIfAvailable optional
     * If true, the filter will return the result from the last call who's result was not from the cache that was made to this method with identical filter and related settings.
     * @return \Wafl\Extensions\Communication\Answers\Models\FunctionalModel\Category[] an array of the matching QaCategorys
     * @throws DataModelException
     * @throws DataException
     */
    public static function Filter($filter = null, $orderByFieldName = null, $maxRecordCount = null, $groupingField = null,
    $joinObjects = null, $startOffset = 0, $arrayKeyField = null, $useCachedIfAvailable = true)
    {
        self::Initialize();
        return self::_filter($filter, $orderByFieldName, $maxRecordCount, $groupingField, $joinObjects, $startOffset, $arrayKeyField, $useCachedIfAvailable);
    }

    /**
     * FilterFirst
     *
     * Get the QaCategory's from the Storage Engine that matches the given filter,
     * Optionally sorted, grouped, and/or joined based on passed arguments.
     *
     * @param string $filter optional The filter to filter by.  If no filter is passed in, then all results are returned.
     * @param string $orderByFieldName optional The name of the field to order the result objects by.
     * @param string $groupingField optional The name of the field to group on.
     * @param array $joinObjects optional
     * An array of items to inner-join on the filterable object as an added filter constraint.
     * The array should be associative where the key is the name of the item to join on
     * and the value is the name of a field that is <b>mutual</b> between the filterable item and the join item.
     * If there is not a mutual field between the items, then the value should be null.
     * In that case, you will need to add an equality condition to the
     * <i>$filter</i> for the fields you wish to join on.
     * @param boolean $useCachedIfAvailable optional
     * If true, the filter will return the result from the last call who's result was not from the cache that was made to this method with identical filter and related settings.
     *
     * @return null|\Wafl\Extensions\Communication\Answers\Models\FunctionalModel\Category the first matching QaCategorys
     * @throws DataModelException
     */
    public static function FilterFirst($filter = null, $orderByFieldName = null, $groupingField = null, $joinObjects = null, $useCachedIfAvailable = true)
    {
        self::Initialize();
        return self::_filterFirst($filter, $orderByFieldName, $groupingField, $joinObjects, $useCachedIfAvailable);
    }

    /**
     * Get the QaCategory's from the Storage Engine that match the specified arguments,
     * Optionally sorted and/or constrained by additional arguments.
     *
     * @param string $orderByFieldName optional The name of the field to order the QaCategory's by
     * @param int $maxRecordCount optional The maximum number of QaCategory's to return
     * @param boolean $useCachedIfAvailable optional
     *
     * @return \Wafl\Extensions\Communication\Answers\Models\FunctionalModel\Category[] an array of the matching QaCategorys
     */
    public static function Get($orderByFieldName = null, $maxRecordCount = null, $useCachedIfAvailable = true)
    {
        self::Initialize();

        return self::_filter($filter, $orderByFieldName, $maxRecordCount, null, $useCachedIfAvailable);
    }


    /**
     * Get the current CategoryId for this QaCategory.
     *
     * @return integer The CategoryId
     */
    public function Get_CategoryId()
    {
        return $this->_categoryId;
    }

    /**
     * Set the CategoryId for this QaCategory
     *
     * @return \Wafl\Extensions\Communication\Answers\Models\FunctionalModel\Category This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_CategoryId($categoryId)
    {
        if ($this->_categoryId !== $categoryId)
        {

            if (!$this->CanCurrentUserSetProperty("CategoryId"))
            {
                throw new \Exception("Current user does not have permission to set model property");
            }
            $categoryId = is_null($categoryId)?null:intval($categoryId);
            $this->_categoryId = $categoryId;
            $this->ModelChanged("CategoryId");
        }
        return $this;
    }


    /**
     * Get the current Title for this QaCategory.
     *
     * @return string The Title
     */
    public function Get_Title()
    {
        return $this->_title;
    }

    /**
     * Set the Title for this QaCategory
     *
     * @return \Wafl\Extensions\Communication\Answers\Models\FunctionalModel\Category This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_Title($title)
    {
        if ($this->_title !== $title)
        {

            if (!$this->CanCurrentUserSetProperty("Title"))
            {
                throw new \Exception("Current user does not have permission to set model property");
            }
            $title = is_null($title)?null:strval($title);
            $this->_title = $title;
            $this->ModelChanged("Title");
        }
        return $this;
    }

    /**
    * Gets the name of the field that stores a unique key identifying each instance.
    * This is often the primary key in your database table.
    *
    * @return string
    */
    public static function Get_KeyFieldName()
    {
        return "CategoryId";
    }

    /**
    * Whether or not the values in the KeyField are generated automatically (like a database auto-increment) or if they generated manually.
    *
    * @return boolean TRUE if the values are generated automatically by the engine, otherwise FALSE
    */
    public static function Get_KeyIsAutoGenerated()
    {
        return true;
    }

	public static function Get_Destination()
	{
		$extension = self::$extension;
        return $extension::Get_TablePrefix()."Categories";
	}

    public static function Set_Extension($extension)
    {
        self::$extension = $extension;
    }
}