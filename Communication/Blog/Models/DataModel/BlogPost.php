<?php
namespace Wafl\Extensions\Communication\Blog\Models\DataModel;

use \DblEj\Data\Field;

/**
 * BlogPost
 * Represents a row in the database table BlogPosts
 */
abstract class BlogPost
extends \DblEj\Extension\ExtensionDataModel
{

    /**
     * BlogPostId
     *
     * Data Storage (Wafl\Extensions\Storage\MySql\MySql):
     *        Primary Key
     *        Type: DATA_TYPE_INT unsigned
     *        Default: null
     *
     * @var integer
     */
    protected $_blogPostId;

    /**
     * PostDate
     *
     * Data Storage (Wafl\Extensions\Storage\MySql\MySql):
     *        Type: DATA_TYPE_INT unsigned
     *        Default: null
     *
     * @var integer
     */
    protected $_postDate;

    /**
     * Title
     *
     * Data Storage (Wafl\Extensions\Storage\MySql\MySql):
     *        Type: DATA_TYPE_STRING
     *        Default: null
     *
     * @var string
     */
    protected $_title;

    /**
     * Contents
     *
     * Data Storage (Wafl\Extensions\Storage\MySql\MySql):
     *        Type: DATA_TYPE_STRING
     *        Default: null
     *
     * @var string
     */
    protected $_contents;

    /**
     * UserId
     *
     * Data Storage (Wafl\Extensions\Storage\MySql\MySql):
     *        Type: DATA_TYPE_INT unsigned
     *        Default: null
     *
     * @var integer
     */
    protected $_userId;

    /**
     * BlogCategoryId
     *
     * Data Storage (Wafl\Extensions\Storage\MySql\MySql):
     *        Type: DATA_TYPE_INT unsigned
     *        Default: null
     *
     * @var integer
     */
    protected $_blogCategoryId;

    protected $_isPublished;

    protected $_urlTitle;
    protected static $extension;
    /**
     * Get_FieldDataTypes
     *
     * Get an array of this model's fields and their data types
     *
     */
    public static function GetFieldDataTypes()
    {
        $fieldTypes = array();
        $fieldTypes["BlogPostId"] = Field::DATA_TYPE_INT;
        $fieldTypes["PostDate"] = Field::DATA_TYPE_INT;
        $fieldTypes["Title"] = Field::DATA_TYPE_STRING;
        $fieldTypes["Contents"] = Field::DATA_TYPE_STRING;
        $fieldTypes["UserId"] = Field::DATA_TYPE_INT;
        $fieldTypes["BlogCategoryId"] = Field::DATA_TYPE_INT;
        $fieldTypes["UrlTitle"] = Field::DATA_TYPE_STRING;
        $fieldTypes["IsPublished"] = Field::DATA_TYPE_BOOL;
        return $fieldTypes;
    }
    public static function Set_Extension($extension)
    {
        self::$extension = $extension;
    }
    /**
     * Search
     *
     * Search an index for the given criteria and return matching BlogPosts.
     * An "index" in this context refers to an implementor of IIndex and is generated by an IIndexer (such as the Apache Solr Indexer Extension).
     *
     * @param string $searchFieldName The name of the INDEX FIELD (not necessarily the same as the model or table's field) to search on.
     * @param string $searchValue The indexed value to search for.
     * @param \DblEj\Data\IndexSort[] $sorts How to sort the results.
     * @param int $maxResults The maximum number of results to return.
     * @param int $startOffset The start offset of results to return.
     * @param string $resultKeyField The name of the indexes key field which will be used to lookup the ctual data in the data storage.
     * @param \DblEj\Data\IIndex $searchIndex Which index to seach.  If not provided, the default search index will be used.
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPost[]
     * @throws \Exception
     */
    public static function Search($searchFieldName, $searchValue, $sorts = null, $maxResults = 100, $startOffset = 0, $resultKeyField = null, \DblEj\Data\IIndex $searchIndex = null)
    {
        self::Initialize();
        return self::_search($searchFieldName, $searchValue, $sorts, $resultKeyField, $maxResults, $startOffset, $searchIndex);
    }

    /**
     * Filter
     *
     * Get the BlogPost's from the Storage Engine that matches the given filter and other criteria.
     *
     * @param string $filter optional The filter to filter by.  If no filter is passed in, then all results are returned.
     * @param string $orderByFieldName optional The name of the field to order the BlogPost's by
     * @param int $maxRecordCount optional The maximum number of BlogPost's to return
     * @param string $groupingField optional
     * @param array $joinObjects optional The tables and fields to join as part of the search criteria (note: joined columns are not returned as properties of the data model).
     * @param int $startOffset optional
     * @param string $arrayKeyField optional
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPost[] an array of the matching BlogPosts
     * @throws DataModelException
     * @throws DataException
     */
    public static function Filter($filter = null, $orderByFieldName = null, $maxRecordCount = null, $groupingField = null,
    $joinObjects = null, $startOffset = 0, $arrayKeyField = null)
    {
        self::Initialize();
        return self::_filter($filter, $orderByFieldName, $maxRecordCount, $groupingField, $joinObjects, $startOffset, $arrayKeyField);
    }

    /**
     * FilterFirst
     *
     * Get the BlogPost's from the Storage Engine that matches the given filter and other criteria.
     *
     * @param string $filter
     * @param string $orderByFieldName
     * @param string $groupingField
     * @param array $joinObjects
     * @return null|\Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPost the first matching BlogPosts
     * @throws DataModelException
     */
    public static function FilterFirst($filter = null, $orderByFieldName = null, $groupingField = null, $joinObjects = null)
    {
        self::Initialize();
        return self::_filterFirst($filter, $orderByFieldName, $groupingField, $joinObjects);
    }


    /**
     * Get the current BlogPostId for this BlogPost.
     *
     * @return integer The BlogPostId
     */
    public function Get_BlogPostId()
    {
        return $this->_blogPostId;
    }

    /**
     * Set the BlogPostId for this BlogPost
     *
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPost This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_BlogPostId($blogPostId)
    {
        if ($this->_blogPostId !== $blogPostId)
        {
            $this->_blogPostId = $blogPostId;
            $this->ModelChanged("BlogPostId");
        }
        return $this;
    }


    /**
     * Get the current PostDate for this BlogPost.
     *
     * @return integer The PostDate
     */
    public function Get_PostDate()
    {
        return $this->_postDate;
    }

    /**
     * Set the PostDate for this BlogPost
     *
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPost This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_PostDate($postDate)
    {
        if ($this->_postDate !== $postDate)
        {
            $this->_postDate = $postDate;
            $this->ModelChanged("PostDate");
        }
        return $this;
    }

    public function Get_IsPublished()
    {
        return $this->_isPublished;
    }
    public function Set_IsPublished($isPublished)
    {
        $this->_isPublished = $isPublished;
        return $this;
    }


    /**
     * Get the current Title for this BlogPost.
     *
     * @return string The Title
     */
    public function Get_Title()
    {
        return $this->_title;
    }

    /**
     * Set the Title for this BlogPost
     *
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPost This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_Title($title)
    {
        if ($this->_title !== $title)
        {
            $this->_title = $title;
            $this->ModelChanged("Title");
        }
        return $this;
    }

    public function Get_UrlTitle()
    {
        return $this->_urlTitle;
    }
    public function Set_UrlTitle($title)
    {
        if ($this->_urlTitle !== $title)
        {
            $this->_urlTitle = $title;
            $this->ModelChanged("UrlTitle");
        }
        return $this;
    }



    /**
     * Get the current Contents for this BlogPost.
     *
     * @return string The Contents
     */
    public function Get_Contents()
    {
        return $this->_contents;
    }

    /**
     * Set the Contents for this BlogPost
     *
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPost This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_Contents($contents)
    {
        if ($this->_contents !== $contents)
        {
            $this->_contents = $contents;
            $this->ModelChanged("Contents");
        }
        return $this;
    }


    /**
     * Get the current UserId for this BlogPost.
     *
     * @return integer The UserId
     */
    public function Get_UserId()
    {
        return $this->_userId;
    }

    /**
     * Set the UserId for this BlogPost
     *
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPost This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_UserId($userId)
    {
        if ($this->_userId !== $userId)
        {
            $this->_userId = $userId;
            $this->ModelChanged("UserId");
        }
        return $this;
    }


    /**
     * Get the current BlogCategoryId for this BlogPost.
     *
     * @return integer The BlogCategoryId
     */
    public function Get_BlogCategoryId()
    {
        return $this->_blogCategoryId;
    }

    /**
     * Set the BlogCategoryId for this BlogPost
     *
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPost This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_BlogCategoryId($blogCategoryId)
    {
        if ($this->_blogCategoryId !== $blogCategoryId)
        {
            $this->_blogCategoryId = $blogCategoryId;
            $this->ModelChanged("BlogCategoryId");
        }
        return $this;
    }

    /**
     * Get the BlogPostTags for this BlogPost
     *
     * @param $sortBy The name of the field to sort on.
     * @param $filter Additional query filter to apply.
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPostTag[]
     */
    public function GetBlogPostTags($sortBy = null, $filter = null)
    {
        if ($this->Get_BlogPostId())
        {
            $clause = "BlogPostId = '".$this->Get_BlogPostId()."'";
            if ($filter)
            {
                $clause = "$clause and ($filter)";
            }

            return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPostTag::Filter($clause, $sortBy);
        } else {
            return array();
        }
    }

    public function GetBlogCategory()
    {
        return new \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogCategory($this->_blogCategoryId);
    }
    /**
     * Get Tags related to this BlogPost (cross-ref: BlogPostTags) (1b)
     *
     * @param $sortBy The name of the field to sort on.
     * @param $filter Additional query filter to apply.
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\MainTag[]
     */
    public function GetMainTagsCrossReferencedByBlogPostTags($sortBy = null, $filter = null)
    {
        $clause = "BlogPostTags.BlogPostId = '".$this->Get_BlogPostId()."'";
        $tagClass = \Wafl\Extensions\Communication\Blog\Blog::Get_TagModel();
        if ($filter)
        {
            $clause = "$clause and ($filter)";
        }

        return $tagClass::Filter($clause, $sortBy, null, null, array("BlogPostTags"=>"TagId"));
    }

    /**
    * Get the related User
    *
    * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\User The User
    */
    public function GetUser($sortBy = null)
    {
        $userClass = \Wafl\Extensions\Communication\Blog\Blog::Get_UserClass();
        if (!$userClass)
        {
            throw new \Exception("You must specify the UserClass setting for the Blog extension");
        }
        return $userClass::FilterFirst("UserId = '".$this->Get_UserId()."'", $sortBy);
    }

    /**
    * Gets the name of the field that stores a unique key identifying each instance.
    * This is often the primary key in your database table.
    *
    * @return string
    */
    public static function Get_KeyFieldName()
    {
        return "BlogPostId";
    }

    /**
    * Whether or not the values in the KeyField are generated automatically (like a database auto-increment) or if they generated manually.
    *
    * @return boolean TRUE if the values are generated automatically by the engine, otherwise FALSE
    */
    public static function Get_KeyIsAutoGenerated()
    {
        return true;
    }

    /**
    * A Storage Engine specific string that tells the Storage Engine where this Model is to be stored.
    * This is typically the name of a database table.
    *
    * @return string
    */
    public static function Get_Destination()
    {
        return "BlogPosts";
    }

    /**
    * An arbitrary logical grouping for objects that can be stored in a storage engine.
    * If you have a Storage Engine set up with the same Storage Group, then ActiveWafl will use that storage engine when retrieving and persisting models of this type.
    * @return string
    */
    public static function Get_StorageGroup()
    {
        $extension = self::$extension;
        return $extension->GetSettingValue("StorageGroup");
    }
}