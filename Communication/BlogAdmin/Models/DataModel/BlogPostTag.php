<?php
namespace Wafl\Extensions\Communication\BlogAdmin\Models\DataModel;

use \DblEj\Data\Field;

/**
 * BlogPostTag
 * Represents a row in the database table BlogPostTags
 */
abstract class BlogPostTag
extends \DblEj\Extension\ExtensionDataModel
{

    /**
     * BlogPostTagId
     *
     * Data Storage (Wafl\Extensions\Storage\MySql\MySql):
     *        Primary Key
     *        Type: DATA_TYPE_INT unsigned
     *        Default: null
     *
     * @var integer
     */
    protected $_blogPostTagId;
    protected static $extension;
    /**
     * TagId
     *
     * Data Storage (Wafl\Extensions\Storage\MySql\MySql):
     *        Type: DATA_TYPE_INT unsigned
     *        Default: null
     *
     * @var integer
     */
    protected $_tagId;

    /**
     * BlogPostId
     *
     * Data Storage (Wafl\Extensions\Storage\MySql\MySql):
     *        Type: DATA_TYPE_INT unsigned
     *        Default: null
     *
     * @var integer
     */
    protected $_blogPostId;
    /**
     * Get_FieldDataTypes
     *
     * Get an array of this model's fields and their data types
     *
     */
    public static function GetFieldDataTypes()
    {
        $fieldTypes = array();
                $fieldTypes["BlogPostTagId"] = Field::DATA_TYPE_INT;
        $fieldTypes["TagId"] = Field::DATA_TYPE_INT;
        $fieldTypes["BlogPostId"] = Field::DATA_TYPE_INT;
        return $fieldTypes;
    }

    /**
     * Search
     *
     * Search an index for the given criteria and return matching BlogPostTags.
     * An "index" in this context refers to an implementor of IIndex and is generated by an IIndexer (such as the Apache Solr Indexer Extension).
     *
     * @param string $searchFieldName The name of the INDEX FIELD (not necessarily the same as the model or table's field) to search on.
     * @param string $searchValue The indexed value to search for.
     * @param \DblEj\Data\IndexSort[] $sorts How to sort the results.
     * @param int $maxResults The maximum number of results to return.
     * @param int $startOffset The start offset of results to return.
     * @param string $resultKeyField The name of the indexes key field which will be used to lookup the ctual data in the data storage.
     * @param \DblEj\Data\IIndex $searchIndex Which index to seach.  If not provided, the default search index will be used.
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPostTag[]
     * @throws \Exception
     */
    public static function Search($searchFieldName, $searchValue, $sorts = null, $maxResults = 100, $startOffset = 0, $resultKeyField = null, \DblEj\Data\IIndex $searchIndex = null, $returnRaw = true)
    {
        self::Initialize();
        return self::_search($searchFieldName, $searchValue, $sorts, $resultKeyField, $maxResults, $startOffset, $searchIndex, $returnRaw);
    }
    public static function Set_Extension($extension)
    {
        self::$extension = $extension;
    }
    /**
     * Filter
     *
     * Get the BlogPostTag's from the Storage Engine that matches the given filter and other criteria.
     *
     * @param string $filter optional The filter to filter by.  If no filter is passed in, then all results are returned.
     * @param string $orderByFieldName optional The name of the field to order the BlogPostTag's by
     * @param int $maxRecordCount optional The maximum number of BlogPostTag's to return
     * @param string $groupingField optional
     * @param array $joinObjects optional The tables and fields to join as part of the search criteria (note: joined columns are not returned as properties of the data model).
     * @param int $startOffset optional
     * @param string $arrayKeyField optional
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPostTag[] an array of the matching BlogPostTags
     * @throws DataModelException
     * @throws DataException
     */
    public static function Filter($filter = null, $orderByFieldName = null, $maxRecordCount = null, $groupingField = null,
    $joinObjects = null, $startOffset = 0, $arrayKeyField = null)
    {
        self::Initialize();
        return self::_filter($filter, $orderByFieldName, $maxRecordCount, $groupingField, $joinObjects, $startOffset, $arrayKeyField);
    }

    /**
     * FilterFirst
     *
     * Get the BlogPostTag's from the Storage Engine that matches the given filter and other criteria.
     *
     * @param string $filter
     * @param string $orderByFieldName
     * @param string $groupingField
     * @param array $joinObjects
     * @return null|\Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPostTag the first matching BlogPostTags
     * @throws DataModelException
     */
    public static function FilterFirst($filter = null, $orderByFieldName = null, $groupingField = null, $joinObjects = null)
    {
        self::Initialize();
        return self::_filterFirst($filter, $orderByFieldName, $groupingField, $joinObjects);
    }


    /**
     * Get the current BlogPostTagId for this BlogPostTag.
     *
     * @return integer The BlogPostTagId
     */
    public function Get_BlogPostTagId()
    {
        return $this->_blogPostTagId;
    }

    /**
     * Set the BlogPostTagId for this BlogPostTag
     *
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPostTag This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_BlogPostTagId($blogPostTagId)
    {
        if ($this->_blogPostTagId !== $blogPostTagId)
        {
            $this->_blogPostTagId = $blogPostTagId;
            $this->ModelChanged("BlogPostTagId");
        }
        return $this;
    }


    /**
     * Get the current TagId for this BlogPostTag.
     *
     * @return integer The TagId
     */
    public function Get_TagId()
    {
        return $this->_tagId;
    }

    /**
     * Set the TagId for this BlogPostTag
     *
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPostTag This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_TagId($tagId)
    {
        if ($this->_tagId !== $tagId)
        {
            $this->_tagId = $tagId;
            $this->ModelChanged("TagId");
        }
        return $this;
    }


    /**
     * Get the current BlogPostId for this BlogPostTag.
     *
     * @return integer The BlogPostId
     */
    public function Get_BlogPostId()
    {
        return $this->_blogPostId;
    }

    /**
     * Set the BlogPostId for this BlogPostTag
     *
     * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPostTag This instance is returned back to the caller to facilitate chained method calls
     */
    public function Set_BlogPostId($blogPostId)
    {
        if ($this->_blogPostId !== $blogPostId)
        {
            $this->_blogPostId = $blogPostId;
            $this->ModelChanged("BlogPostId");
        }
        return $this;
    }

    /**
    * Get the related BlogPost
    *
    * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPost The BlogPost
    */
    public function GetBlogPost($sortBy = null)
    {
        return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\BlogPost::FilterFirst("BlogPostId = '".$this->Get_BlogPostId()."'", $sortBy);
    }

    /**
    * Get the related Tag
    *
    * @return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\MainTag The Tag
    */
    public function GetTag($sortBy = null)
    {
        return \Wafl\Extensions\Communication\Blog\Models\FunctionalModel\MainTag::FilterFirst("TagId = '".$this->Get_TagId()."'", $sortBy);
    }

    /**
    * Gets the name of the field that stores a unique key identifying each instance.
    * This is often the primary key in your database table.
    *
    * @return string
    */
    public static function Get_KeyFieldName()
    {
        return "BlogPostTagId";
    }

    /**
    * Whether or not the values in the KeyField are generated automatically (like a database auto-increment) or if they generated manually.
    *
    * @return boolean TRUE if the values are generated automatically by the engine, otherwise FALSE
    */
    public static function Get_KeyIsAutoGenerated()
    {
        return true;
    }

    /**
    * A Storage Engine specific string that tells the Storage Engine where this Model is to be stored.
    * This is typically the name of a database table.
    *
    * @return string
    */
    public static function Get_Destination()
    {
        return "BlogPostTags";
    }

    /**
    * An arbitrary logical grouping for objects that can be stored in a storage engine.
    * If you have a Storage Engine set up with the same Storage Group, then ActiveWafl will use that storage engine when retrieving and persisting models of this type.
    * @return string
    */
    public static function Get_StorageGroup()
    {
        $extension = self::$extension;
        return $extension->GetSettingValue("StorageGroup");
    }
}